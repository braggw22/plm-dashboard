/* Phase 2.1 app skeleton with DateService and SharePoint wiring placeholders */ 
const TZ = "America/Chicago";
const AppConfig = {
  msal: { clientId: "YOUR_AZURE_AD_APP_CLIENT_ID", authority: "https://login.microsoftonline.com/YOUR_TENANT_ID", redirectUri: window.location.origin + window.location.pathname },
  graphScopes: ["User.Read","Files.ReadWrite.All","Sites.Read.All","Sites.ReadWrite.All","offline_access"],
  sharepoint: { siteHostname: "yourtenant.sharepoint.com", sitePath: "/sites/PLM", driveName: "Documents", folderPath: "/01 SCRUM", dataFileName: "dashboard-data.json" }
};
const STORAGE_KEY = "plm.config.v2";
const DateService = (() => {
  const fmtShort = new Intl.DateTimeFormat("en-US",{ timeZone: TZ, weekday:"short", month:"short", day:"2-digit", year:"numeric"});
  const fmtTime = new Intl.DateTimeFormat("en-US",{ timeZone: TZ, hour:"2-digit", minute:"2-digit", hour12:true });
  const now = () => new Date();
  const format = (d)=>fmtShort.format(d);
  const iso = (d)=>{
    const parts = new Intl.DateTimeFormat("en-CA",{ timeZone: TZ, year:"numeric", month:"2-digit", day:"2-digit"}).formatToParts(d);
    const y=parts.find(p=>p.type==="year").value, m=parts.find(p=>p.type==="month").value, dd=parts.find(p=>p.type==="day").value;
    return `${y}-${m}-${dd}`;
  };
  const ymd=(d)=>{ const p=new Intl.DateTimeFormat("en-US",{timeZone:TZ,year:"numeric",month:"2-digit",day:"2-digit"}).formatToParts(d); return {y:+p.find(x=>x.type==="year").value,m:+p.find(x=>x.type==="month").value,d:+p.find(x=>x.type==="day").value}; };
  const dateFromLocalYMD=(y,m,d)=>new Date(Date.UTC(y,m-1,d,0,0,0));
  const isWeekend=(d)=>{ const {y,m,d:dd}=ymd(d); const ct=dateFromLocalYMD(y,m,dd); const w=(ct.getUTCDay()+7)%7; return w===0||w===6; };
  const yesterday=(d)=>{ const {y,m,d:dd}=ymd(d); const ct=dateFromLocalYMD(y,m,dd); return new Date(ct.getTime()-86400000); };
  const weekNumber=(d)=>{ const {y,m,d:dd}=ymd(d); const ct=dateFromLocalYMD(y,m,dd); const n=(ct.getUTCDay()+6)%7; const thu=new Date(ct); thu.setUTCDate(thu.getUTCDate()-n+3); const firstThu=new Date(Date.UTC(thu.getUTCFullYear(),0,4)); const n2=(firstThu.getUTCDay()+6)%7; firstThu.setUTCDate(firstThu.getUTCDate()-n2+3); const diff=Math.round((ct-firstThu)/86400000); return 1+Math.floor(diff/7); };
  const timeString=(d)=>fmtTime.format(d);
  return { now, format, iso, isWeekend, yesterday, weekNumber, timeString };
})();
let DB=null, account=null, msalClient=null;
function loadFallback(){ const today=DateService.now(); const yIso=DateService.iso(DateService.yesterday(today)); DB={ meta:{lastTagUpISO:yIso,tz:TZ,activeMemberId:"weston"}, teamMembers:[{id:"weston",name:"Weston Bragg",role:"Installations Engineer"},{id:"brian",name:"Brian Burrer",role:"Engineer"},{id:"chase",name:"Chase Cole",role:"Engineer"},{id:"gavin",name:"Gavin Lasater",role:"Engineer"},{id:"holocom",name:"Holocom (subcontractor)",role:"Subcontractor"}], tagups:[{dateISO:yIso,yesterdayText:"Completed BLDG 1289 drawing corrections; no blockers.",todayText:"Prep notes for PRTH TFR review; organize photo references.",risksText:"None."}], tasks:[{id:"t1",title:"Finalize BLDG 1289 drawing corrections",ownerId:"weston",dueISO:DateService.iso(today),priority:"High",status:"In Progress"},{id:"t2",title:"Review PRTH TFR submittal",ownerId:"brian",dueISO:DateService.iso(today),priority:"Medium",status:"Not Started"},{id:"t3",title:"Draft RFI list for PRTH",ownerId:"chase",dueISO:DateService.iso(DateService.yesterday(today)),priority:"Low",status:"Not Started"},{id:"t4",title:"Sanitize photo log (Appendix E)",ownerId:"gavin",dueISO:DateService.iso(today),priority:"Low",status:"Not Started"},{id:"t5",title:"Cable mapping for Bldg 1289",ownerId:"holocom",dueISO:DateService.iso(today),priority:"High",status:"In Progress"}], tfr:[], rfis:[], risks:[] }; }
function setActiveNav(hash){["nav-dashboard","nav-tagup","nav-tasks","nav-settings"].forEach(id=>document.getElementById(id)?.classList.remove("active")); if(hash.startsWith("#/dashboard"))document.getElementById("nav-dashboard")?.classList.add("active"); if(hash.startsWith("#/tagup"))document.getElementById("nav-tagup")?.classList.add("active"); if(hash.startsWith("#/tasks"))document.getElementById("nav-tasks")?.classList.add("active"); if(hash.startsWith("#/settings"))document.getElementById("nav-settings")?.classList.add("active");}
function router(){ const hash=location.hash||"#/dashboard"; setActiveNav(hash); const path=hash.replace(/^#/,""); const views={"/dashboard":renderDashboard,"/tagup":renderTagUp,"/tasks":renderTasks,"/settings":renderSettings}; (views[path]||views["/dashboard"])(); document.getElementById("app").focus(); }
function updateStatusLine(){ const now=DateService.now(); const time=DateService.timeString(now); const wk=DateService.weekNumber(now); document.getElementById("status-line").textContent=`Local time: ${time} CT | Week ${String(wk).padStart(2,"0")}`; }
function memberName(id){ return DB.teamMembers.find(m=>m.id===id)?.name||"Unassigned"; }
function populateMemberSelect(){ const sel=document.getElementById("memberSelect"); if(!sel)return; sel.innerHTML=""; DB.teamMembers.forEach(m=>{const o=document.createElement("option"); o.value=m.id; o.textContent=m.name; sel.appendChild(o);}); sel.value=DB.meta.activeMemberId; sel.onchange=()=>{DB.meta.activeMemberId=sel.value; router();}; }
function renderDashboard(){ const today=DateService.now(); const todayFmt=DateService.format(today); const active=DB.meta.activeMemberId; const myDueToday=DB.tasks.filter(t=>t.dueISO===DateService.iso(today)&&t.ownerId===active).length; const teamNext7=DB.tasks.filter(t=>{const d=new Date(Date.UTC(...t.dueISO.split('-').map((n,i)=>i==1?int(n)-1:int(n)))); return true;}).length; const html=`<section class="card"><h2>Today — <span class="label">${todayFmt}</span></h2><div class="kpi-row"><div class="kpi" tabindex="0"><div class="label">My Tasks Due Today</div><div class="num">${myDueToday}</div><div class="label">${memberName(active)}</div></div><div class="kpi" tabindex="0"><div class="label">Team Tasks (7d)</div><div class="num">${DB.tasks.length}</div><div class="label">You: ${myDueToday}</div></div><div class="kpi" tabindex="0"><div class="label">RFIs</div><div class="num">${DB.rfis.length}</div></div><div class="kpi" tabindex="0"><div class="label">Risks</div><div class="num">${DB.risks.length}</div></div></div><div class="button-row" style="margin-top:0.5rem;"><a href="#/tagup" class="btn" role="button">Open Daily Tag-Up</a><a href="#/tasks" class="btn" role="button">Open Task Manager</a></div></section><section class="card"><h3>TFR Progress by Site</h3><p class="label">Phase 2 will wire real data.</p><div class="button-row"><button type="button" onclick="alert('Sites table coming in Phase 2')">View Sites</button></div></section>`; document.getElementById("app").innerHTML=html; populateMemberSelect(); }
function renderTagUp(){ const now=DateService.now(); const active=DB.meta.activeMemberId; const yest=DateService.yesterday(now); const todayISO=DateService.iso(now); const todayLabel=DateService.format(now); const yestLabel=DateService.format(yest); const weekendYesterdayDefault=DateService.isWeekend(now)?"Weekend — no project work logged.":""; const suggestions=DB.tasks.filter(t=>t.dueISO===todayISO&&t.ownerId===active).map(t=>`• ${t.title} (${memberName(t.ownerId)})`); const suggestionText=suggestions.length?suggestions.join("\n"):"• —"; const html=`<section class="card"><h2>Daily Tag-Up</h2><div class="label">Timezone: ${TZ} • Member: ${memberName(active)}</div><div class="section-row"><div><h3>Yesterday — <span class="label">${yestLabel}</span></h3><textarea id="yesterdayText" placeholder="${weekendYesterdayDefault?weekendYesterdayDefault:'Add yesterday notes...'}">${weekendYesterdayDefault}</textarea></div><div><h3>Today — <span class="label">${todayLabel}</span></h3><textarea id="todayText" placeholder="Add today notes...">${suggestionText}</textarea></div></div><div style="margin-top:0.75rem;"><h3>Risks / Impediments</h3><textarea id="risksText" placeholder="Any blockers or risks?">None.</textarea></div><div class="button-row" style="margin-top:0.75rem;"><button id="btn-copy" type="button">Copy to Clipboard</button><button id="btn-save" type="button">Save</button><a href="#/dashboard" class="btn" role="button">Back to Dashboard</a></div></section>`; document.getElementById("app").innerHTML=html; populateMemberSelect(); document.getElementById("btn-copy").onclick=()=>{ const y=document.getElementById("yesterdayText").value.trim(); const t=document.getElementById("todayText").value.trim(); const r=document.getElementById("risksText").value.trim(); const blob=[`Yesterday (${yestLabel})`, y||"(no entry)","",`Today (${todayLabel})`, t||"(no entry)","", "Risks / Impediments", r||"(none)"].join("\n"); navigator.clipboard.writeText(blob).then(()=>alert("Copied."),()=>alert("Copy blocked.")); }; document.getElementById("btn-save").onclick=()=>{ const todayISO2=DateService.iso(DateService.now()); const yText=document.getElementById("yesterdayText").value.trim(); const tText=document.getElementById("todayText").value.trim(); const rText=document.getElementById("risksText").value.trim(); const idx=DB.tagups.findIndex(tu=>tu.dateISO===todayISO2); if(idx>=0){ DB.tagups[idx].yesterdayText=yText; DB.tagups[idx].todayText=tText; DB.tagups[idx].risksText=rText; } else { DB.tagups.push({dateISO:todayISO2,yesterdayText:yText,todayText:tText,risksText:rText}); } DB.meta.lastTagUpISO=todayISO2; alert("Saved (in-memory)."); }; }
function renderTasks(){ const todayISO=DateService.iso(DateService.now()); const active=DB.meta.activeMemberId; const list=DB.tasks.map(t=>`<li class="card" tabindex="0"><div class="inline"><strong>${t.title}</strong><span class="label">Owner: ${memberName(t.ownerId)}</span><span class="label">Priority: ${t.priority||"—"}</span><span class="label">Status: ${t.status||"—"}</span><span class="label">Due: ${t.dueISO}${t.dueISO===todayISO?" (today)":""}</span></div><div class="button-row" style="margin-top:0.5rem;"><button type="button" onclick="alert('Edit in Phase 2.3')">Edit</button><button type="button" onclick="alert('Complete in Phase 2.3')">Complete</button><button type="button" onclick="alert('Reassign in Phase 2.3')">Reassign</button></div></li>`).join(""); document.getElementById("app").innerHTML=`<section class="card"><h2>Task Manager</h2><div class="button-row" style="margin-bottom:0.75rem;"><button type="button" onclick="alert('Add task in Phase 2.3')">Add Task</button><button type="button" onclick="alert('Filter panel in Phase 2.3')">Filters</button><a href="#/dashboard" class="btn" role="button">Back to Dashboard</a></div><p class="label">Active member: ${memberName(active)}</p><ul role="list" style="list-style:none; padding:0; margin:0;">${list||"<li class='card'>No tasks yet.</li>"}</ul></section>`; populateMemberSelect(); }
function renderSettings(){ document.getElementById("app").innerHTML=`<section class="card"><h2>Settings</h2><p class="label">SharePoint wiring will activate in Phase 2.2</p><div class="button-row"><a href="#/dashboard" class="btn" role="button">Back to Dashboard</a></div></section>`; populateMemberSelect(); }
(async function init(){ try{ const res=await fetch("dashboard-data.json",{cache:"no-store"}); if(!res.ok) throw new Error("HTTP "+res.status); DB=await res.json(); } catch{ loadFallback(); } window.addEventListener("hashchange", router); router(); updateStatusLine(); setInterval(updateStatusLine, 30000); })();
